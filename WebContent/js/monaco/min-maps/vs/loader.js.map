{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","_commonjsGlobal","global","AMDLoader","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","replace","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ensureError","err","Error","message","String","stack","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","phase","console","error","moduleId","neededBy","baseUrl","isBuild","paths","config","catchError","recordStats","urlArgs","onError","ignoreDuplicateModules","cspNonce","nodeModules","nodeCachedData","seed","writeDelay","path","undefined","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getConfig","getElementsByTagName","appendChild","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_initNodeRequire","that","Module","_compile","content","hashData","scriptSource","wrap","recorder","getRecorder","cachedDataPath","_getCachedDataPath","data","readFileSync","slice","cachedData","_e","Script","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_handleCachedData","_verifyCachedData","opts","nodeInstrumenter","c","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","normalizedScriptSrc_1","normalize","vmScriptPathOrUri_1","_getElectronRendererScriptPathOrUri","wantsCachedData_1","Boolean","cachedDataPath_1","_readSourceAndCachedData","charCodeAt","_BOM","_PREFIX","_SUFFIX","scriptOpts","_createAndEvalScript","contents","ret","globalDefineFunc","getGlobalAMDDefineFunc","receivedDefineCall","localDefineFunc","arguments","amd","call","getGlobalAMDRequireFunc","isElectronRenderer","driveLetterMatch","match","toUpperCase","hash","createHash","update","digest","basename","join","createCachedData","cachedDataRejected","unlink","_createAndWriteCachedData","timeout","ceil","random","lastSize","iteration","createLoop","setTimeout","writeFile","pow","sourcePath","source_1","cachedData_1","hashData_1","steps_1","step_1","readFile","encoding","hashDataNow","equals","warn","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","_err","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","_nodeRequire_1","what","RequireFunc","DefineFunc","jQuery","_requireFunc_config","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar _commonjsGlobal = typeof global === 'object' ? global : {};\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = /** @class */ (function () {\n        function Environment() {\n            this._detected = false;\n            this._isWindows = false;\n            this._isNode = false;\n            this._isElectronRenderer = false;\n            this._isWebWorker = false;\n        }\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\n            get: function () {\n                this._detect();\n                return this._isWindows;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isNode\", {\n            get: function () {\n                this._detect();\n                return this._isNode;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\n            get: function () {\n                this._detect();\n                return this._isElectronRenderer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\n            get: function () {\n                this._detect();\n                return this._isWebWorker;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Environment.prototype._detect = function () {\n            if (this._detected) {\n                return;\n            }\n            this._detected = true;\n            this._isWindows = Environment._isWindows();\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEvent = /** @class */ (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = /** @class */ (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = /** @class */ (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n        return NullLoaderEventRecorder;\n    }());\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = /** @class */ (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri).replace(/%23/g, '#');\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return Utilities.startsWith(id, '===anonymous');\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        Utilities.NEXT_ANONYMOUS_ID = 1;\n        Utilities.PERFORMANCE_NOW_PROBED = false;\n        Utilities.HAS_PERFORMANCE_NOW = false;\n        return Utilities;\n    }());\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    function ensureError(err) {\n        if (err instanceof Error) {\n            return err;\n        }\n        var result = new Error(err.message || String(err) || 'Unknown Error');\n        if (err.stack) {\n            result.stack = err.stack;\n        }\n        return result;\n    }\n    AMDLoader.ensureError = ensureError;\n    ;\n    var ConfigurationOptionsUtil = /** @class */ (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.phase === 'loading') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error(err);\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.phase === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err);\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                options.catchError = false;\n            }\n            if (typeof options.recordStats === 'undefined') {\n                options.recordStats = false;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (!Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (typeof options.cspNonce !== 'string') {\n                options.cspNonce = '';\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (options.nodeCachedData && typeof options.nodeCachedData === 'object') {\n                if (typeof options.nodeCachedData.seed !== 'string') {\n                    options.nodeCachedData.seed = 'seed';\n                }\n                if (typeof options.nodeCachedData.writeDelay !== 'number' || options.nodeCachedData.writeDelay < 0) {\n                    options.nodeCachedData.writeDelay = 1000 * 7;\n                }\n                if (!options.nodeCachedData.path || typeof options.nodeCachedData.path !== 'string') {\n                    var err = ensureError(new Error('INVALID cached data configuration, \\'path\\' MUST be set'));\n                    err.phase = 'configuration';\n                    options.onError(err);\n                    options.nodeCachedData = undefined;\n                }\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = /** @class */ (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this.options.nodeMain && this._env.isNode) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = /** @class */ (function () {\n        function OnlyOnceScriptLoader(env) {\n            this._env = env;\n            this._scriptLoader = null;\n            this._callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            if (!this._scriptLoader) {\n                this._scriptLoader = (this._env.isWebWorker\n                    ? new WorkerScriptLoader()\n                    : this._env.isNode\n                        ? new NodeScriptLoader(this._env)\n                        : new BrowserScriptLoader());\n            }\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this._callbackMap[scriptSrc];\n            delete this._callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = /** @class */ (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            // Propagate CSP nonce to dynamically created script tag.\n            var cspNonce = moduleManager.getConfig().getOptionsLiteral().cspNonce;\n            if (cspNonce) {\n                script.setAttribute('nonce', cspNonce);\n            }\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = /** @class */ (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = /** @class */ (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            // It is important to check for `nodeCachedData` first and then set `_didPatchNodeRequire`.\n            // That's because `nodeCachedData` is set _after_ calling this for the first time...\n            var nodeCachedData = moduleManager.getConfig().getOptionsLiteral().nodeCachedData;\n            if (!nodeCachedData) {\n                return;\n            }\n            if (this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang and create wrapper function\n                var scriptSource = Module.wrap(content.replace(/^#!.*/, ''));\n                // create script\n                var recorder = moduleManager.getRecorder();\n                var cachedDataPath = that._getCachedDataPath(nodeCachedData, filename);\n                var options = { filename: filename };\n                var hashData;\n                try {\n                    var data = that._fs.readFileSync(cachedDataPath);\n                    hashData = data.slice(0, 16);\n                    options.cachedData = data.slice(16);\n                    recorder.record(60 /* CachedDataFound */, cachedDataPath);\n                }\n                catch (_e) {\n                    recorder.record(61 /* CachedDataMissed */, cachedDataPath);\n                }\n                var script = new that._vm.Script(scriptSource, options);\n                var compileWrapper = script.runInThisContext(options);\n                // run script\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, _commonjsGlobal, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                // cached data aftermath\n                that._handleCachedData(script, scriptSource, cachedDataPath, !options.cachedData, moduleManager);\n                that._verifyCachedData(script, scriptSource, cachedDataPath, hashData);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                var normalizedScriptSrc_1 = this._path.normalize(scriptSrc);\n                var vmScriptPathOrUri_1 = this._getElectronRendererScriptPathOrUri(normalizedScriptSrc_1);\n                var wantsCachedData_1 = Boolean(opts.nodeCachedData);\n                var cachedDataPath_1 = wantsCachedData_1 ? this._getCachedDataPath(opts.nodeCachedData, scriptSrc) : undefined;\n                this._readSourceAndCachedData(normalizedScriptSrc_1, cachedDataPath_1, recorder, function (err, data, cachedData, hashData) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var scriptSource;\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        scriptSource = NodeScriptLoader._PREFIX + data.substring(1) + NodeScriptLoader._SUFFIX;\n                    }\n                    else {\n                        scriptSource = NodeScriptLoader._PREFIX + data + NodeScriptLoader._SUFFIX;\n                    }\n                    scriptSource = nodeInstrumenter(scriptSource, normalizedScriptSrc_1);\n                    var scriptOpts = { filename: vmScriptPathOrUri_1, cachedData: cachedData };\n                    var script = _this._createAndEvalScript(moduleManager, scriptSource, scriptOpts, callback, errorback);\n                    _this._handleCachedData(script, scriptSource, cachedDataPath_1, wantsCachedData_1 && !cachedData, moduleManager);\n                    _this._verifyCachedData(script, scriptSource, cachedDataPath_1, hashData);\n                });\n            }\n        };\n        NodeScriptLoader.prototype._createAndEvalScript = function (moduleManager, contents, options, callback, errorback) {\n            var recorder = moduleManager.getRecorder();\n            recorder.record(31 /* NodeBeginEvaluatingScript */, options.filename);\n            var script = new this._vm.Script(contents, options);\n            var ret = script.runInThisContext(options);\n            var globalDefineFunc = moduleManager.getGlobalAMDDefineFunc();\n            var receivedDefineCall = false;\n            var localDefineFunc = function () {\n                receivedDefineCall = true;\n                return globalDefineFunc.apply(null, arguments);\n            };\n            localDefineFunc.amd = globalDefineFunc.amd;\n            ret.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), localDefineFunc, options.filename, this._path.dirname(options.filename));\n            recorder.record(32 /* NodeEndEvaluatingScript */, options.filename);\n            if (receivedDefineCall) {\n                callback();\n            }\n            else {\n                errorback(new Error(\"Didn't receive define call in \" + options.filename + \"!\"));\n            }\n            return script;\n        };\n        NodeScriptLoader.prototype._getElectronRendererScriptPathOrUri = function (path) {\n            if (!this._env.isElectronRenderer) {\n                return path;\n            }\n            var driveLetterMatch = path.match(/^([a-z])\\:(.*)/i);\n            if (driveLetterMatch) {\n                // windows\n                return \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n            }\n            else {\n                // nix\n                return \"file://\" + path;\n            }\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (config, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(config.seed, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(config.path, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._handleCachedData = function (script, scriptSource, cachedDataPath, createCachedData, moduleManager) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // cached data got rejected -> delete and re-create\n                this._fs.unlink(cachedDataPath, function (err) {\n                    moduleManager.getRecorder().record(62 /* CachedDataRejected */, cachedDataPath);\n                    _this._createAndWriteCachedData(script, scriptSource, cachedDataPath, moduleManager);\n                    if (err) {\n                        moduleManager.getConfig().onError(err);\n                    }\n                });\n            }\n            else if (createCachedData) {\n                // no cached data, but wanted\n                this._createAndWriteCachedData(script, scriptSource, cachedDataPath, moduleManager);\n            }\n        };\n        // Cached data format: | SOURCE_HASH | V8_CACHED_DATA |\n        // -SOURCE_HASH is the md5 hash of the JS source (always 16 bytes)\n        // -V8_CACHED_DATA is what v8 produces\n        NodeScriptLoader.prototype._createAndWriteCachedData = function (script, scriptSource, cachedDataPath, moduleManager) {\n            var _this = this;\n            var timeout = Math.ceil(moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay * (1 + Math.random()));\n            var lastSize = -1;\n            var iteration = 0;\n            var hashData = undefined;\n            var createLoop = function () {\n                setTimeout(function () {\n                    if (!hashData) {\n                        hashData = _this._crypto.createHash('md5').update(scriptSource, 'utf8').digest();\n                    }\n                    var cachedData = script.createCachedData();\n                    if (cachedData.length === 0 || cachedData.length === lastSize || iteration >= 5) {\n                        return;\n                    }\n                    lastSize = cachedData.length;\n                    _this._fs.writeFile(cachedDataPath, Buffer.concat([hashData, cachedData]), function (err) {\n                        if (err) {\n                            moduleManager.getConfig().onError(err);\n                        }\n                        moduleManager.getRecorder().record(63 /* CachedDataCreated */, cachedDataPath);\n                        createLoop();\n                    });\n                }, timeout * (Math.pow(4, iteration++)));\n            };\n            // with some delay (`timeout`) create cached data\n            // and repeat that (with backoff delay) until the\n            // data seems to be not changing anymore\n            createLoop();\n        };\n        NodeScriptLoader.prototype._readSourceAndCachedData = function (sourcePath, cachedDataPath, recorder, callback) {\n            if (!cachedDataPath) {\n                // no cached data case\n                this._fs.readFile(sourcePath, { encoding: 'utf8' }, callback);\n            }\n            else {\n                // cached data case: read both files in parallel\n                var source_1 = undefined;\n                var cachedData_1 = undefined;\n                var hashData_1 = undefined;\n                var steps_1 = 2;\n                var step_1 = function (err) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else if (--steps_1 === 0) {\n                        callback(undefined, source_1, cachedData_1, hashData_1);\n                    }\n                };\n                this._fs.readFile(sourcePath, { encoding: 'utf8' }, function (err, data) {\n                    source_1 = data;\n                    step_1(err);\n                });\n                this._fs.readFile(cachedDataPath, function (err, data) {\n                    if (!err && data && data.length > 0) {\n                        hashData_1 = data.slice(0, 16);\n                        cachedData_1 = data.slice(16);\n                        recorder.record(60 /* CachedDataFound */, cachedDataPath);\n                    }\n                    else {\n                        recorder.record(61 /* CachedDataMissed */, cachedDataPath);\n                    }\n                    step_1(); // ignored: cached data is optional\n                });\n            }\n        };\n        NodeScriptLoader.prototype._verifyCachedData = function (script, scriptSource, cachedDataPath, hashData) {\n            var _this = this;\n            if (!hashData) {\n                // nothing to do\n                return;\n            }\n            if (script.cachedDataRejected) {\n                // invalid anyways\n                return;\n            }\n            setTimeout(function () {\n                // check source hash - the contract is that file paths change when file content\n                // change (e.g use the commit or version id as cache path). this check is\n                // for violations of this contract.\n                var hashDataNow = _this._crypto.createHash('md5').update(scriptSource, 'utf8').digest();\n                if (!hashData.equals(hashDataNow)) {\n                    console.warn(\"FAILED TO VERIFY CACHED DATA. Deleting '\" + cachedDataPath + \"' now, but a RESTART IS REQUIRED\");\n                    _this._fs.unlink(cachedDataPath, function (err) { return console.error(\"FAILED to unlink: '\" + cachedDataPath + \"'\", err); });\n                }\n            }, Math.ceil(5000 * (1 + Math.random())));\n        };\n        NodeScriptLoader._BOM = 0xFEFF;\n        NodeScriptLoader._PREFIX = '(function (require, define, __filename, __dirname) { ';\n        NodeScriptLoader._SUFFIX = '\\n});';\n        return NodeScriptLoader;\n    }());\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env);\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = /** @class */ (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        ModuleIdResolver.ROOT = new ModuleIdResolver('');\n        return ModuleIdResolver;\n    }());\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = /** @class */ (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.error = null;\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                var err = AMDLoader.ensureError(producedError);\n                err.phase = 'factory';\n                err.moduleId = this.strId;\n                this.error = err;\n                config.onError(err);\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            this._isComplete = true;\n            this.error = err;\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = /** @class */ (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = /** @class */ (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n        RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n        RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n        return RegularDependency;\n    }());\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = /** @class */ (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = /** @class */ (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack || null;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = (m.dependencies || []).map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            if (m.error) {\n                throw m.error;\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, _err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            var err = AMDLoader.ensureError(_err);\n            err.phase = 'loading';\n            err.moduleId = strModuleId;\n            err.neededBy = neededBy;\n            return err;\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            if (!this._modules2[moduleId]) {\n                this._modules2[moduleId] = new Module(moduleId, this._moduleIdProvider.getStrModuleId(moduleId), [], function () { }, function () { }, null);\n            }\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                    if (path !== null) {\n                        path.push(fromId);\n                        return path;\n                    }\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var dependency = dependencies[i];\n                    if (dependency === RegularDependency.EXPORTS) {\n                        module.exportsPassedIn = true;\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.MODULE) {\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.REQUIRE) {\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    var dependencyModule = this._modules2[dependency.id];\n                    if (dependencyModule && dependencyModule.isComplete()) {\n                        if (dependencyModule.error) {\n                            module.onDependencyError(dependencyModule.error);\n                            return;\n                        }\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    if (this._hasDependencyPath(dependency.id, module.id)) {\n                        console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                        var cyclePath = this._findCyclePath(dependency.id, module.id, 0) || [];\n                        cyclePath.reverse();\n                        cyclePath.push(dependency.id);\n                        console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                        // Break the cycle\n                        module.unresolvedDependenciesCount--;\n                        continue;\n                    }\n                    // record inverse dependency\n                    this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                    this._inverseDependencies2[dependency.id].push(module.id);\n                    if (dependency instanceof PluginDependency) {\n                        var plugin = this._modules2[dependency.pluginId];\n                        if (plugin && plugin.isComplete()) {\n                            this._loadPluginDependency(plugin.exports, dependency);\n                            continue;\n                        }\n                        // Record dependency for when the plugin gets loaded\n                        var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                        if (!inversePluginDeps) {\n                            inversePluginDeps = [];\n                            this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                        }\n                        inversePluginDeps.push(dependency);\n                        this._loadModule(dependency.pluginId);\n                        continue;\n                    }\n                    this._loadModule(dependency.id);\n                }\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            if (dependencies) {\n                for (var i = 0, len = dependencies.length; i < len; i++) {\n                    var dependency = dependencies[i];\n                    if (dependency === RegularDependency.EXPORTS) {\n                        dependenciesValues[i] = module.exports;\n                        continue;\n                    }\n                    if (dependency === RegularDependency.MODULE) {\n                        dependenciesValues[i] = {\n                            id: module.strId,\n                            config: function () {\n                                return _this._config.getConfigForModule(module.strId);\n                            }\n                        };\n                        continue;\n                    }\n                    if (dependency === RegularDependency.REQUIRE) {\n                        dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                        continue;\n                    }\n                    var dependencyModule = this._modules2[dependency.id];\n                    if (dependencyModule) {\n                        dependenciesValues[i] = dependencyModule.exports;\n                        continue;\n                    }\n                    dependenciesValues[i] = null;\n                }\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var env = new AMDLoader.Environment();\n    var moduleManager = null;\n    var DefineFunc = function (id, dependencies, callback) {\n        if (typeof id !== 'string') {\n            callback = dependencies;\n            dependencies = id;\n            id = null;\n        }\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n            callback = dependencies;\n            dependencies = null;\n        }\n        if (!dependencies) {\n            dependencies = ['require', 'exports', 'module'];\n        }\n        if (id) {\n            moduleManager.defineModule(id, dependencies, callback, null, null);\n        }\n        else {\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n        }\n    };\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    var _requireFunc_config = function (params, shouldOverwrite) {\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n        moduleManager.configure(params, shouldOverwrite);\n    };\n    var RequireFunc = function () {\n        if (arguments.length === 1) {\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                _requireFunc_config(arguments[0]);\n                return;\n            }\n            if (typeof arguments[0] === 'string') {\n                return moduleManager.synchronousRequire(arguments[0]);\n            }\n        }\n        if (arguments.length === 2 || arguments.length === 3) {\n            if (Array.isArray(arguments[0])) {\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                return;\n            }\n        }\n        throw new Error('Unrecognized require call');\n    };\n    RequireFunc.config = _requireFunc_config;\n    RequireFunc.getConfig = function () {\n        return moduleManager.getConfig().getOptionsLiteral();\n    };\n    RequireFunc.reset = function () {\n        moduleManager = moduleManager.reset();\n    };\n    RequireFunc.getBuildInfo = function () {\n        return moduleManager.getBuildInfo();\n    };\n    RequireFunc.getStats = function () {\n        return moduleManager.getLoaderEvents();\n    };\n    RequireFunc.define = function () {\n        return DefineFunc.apply(null, arguments);\n    };\n    function init() {\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\n                // re-expose node's require function\n                var nodeRequire = function (what) {\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\n                    try {\n                        return _nodeRequire_1(what);\n                    }\n                    finally {\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\n                    }\n                };\n                AMDLoader.global.nodeRequire = nodeRequire;\n                RequireFunc.nodeRequire = nodeRequire;\n                RequireFunc.__$__nodeRequire = nodeRequire;\n            }\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            require = RequireFunc;\n        }\n        else {\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = DefineFunc;\n            }\n            AMDLoader.global.require = RequireFunc;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        // The global variable require can configure the loader\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n            RequireFunc.config(AMDLoader.global.require);\n        }\n        // This define is for the local closure defined in node in the case that the loader is concatenated\n        define = function () {\n            return DefineFunc.apply(null, arguments);\n        };\n        define.amd = DefineFunc.amd;\n        if (typeof doNotInitLoader === 'undefined') {\n            init();\n        }\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}